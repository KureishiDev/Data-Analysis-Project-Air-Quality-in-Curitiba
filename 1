import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import folium
import geopandas as gpd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.arima.model import ARIMA
from prophet import Prophet

# 1. Coleta e Limpeza de Dados (Exemplo Simplificado - Substitua pelos seus dados reais)
# Supondo que você tenha arquivos CSV para dados de qualidade do ar e estações
dados_ar = pd.read_csv('dados_qualidade_ar.csv')
estacoes = pd.read_csv('estacoes_monitoramento.csv')

# Limpeza básica (adapte conforme necessário)
dados_ar['data_hora'] = pd.to_datetime(dados_ar['data_hora'])
dados_ar.dropna(inplace=True)
estacoes.dropna(inplace=True)

# 2. Análise Exploratória de Dados (EDA)
# Concentração de PM2.5 ao longo do tempo
plt.figure(figsize=(12, 6))
plt.plot(dados_ar['data_hora'], dados_ar['PM2.5'])
plt.title('Concentração de PM2.5 ao Longo do Tempo')
plt.xlabel('Data e Hora')
plt.ylabel('Concentração (µg/m³)')
plt.grid(True)
plt.show()

# Distribuição de PM10 por estação
plt.figure(figsize=(12, 6))
sns.boxplot(x='estacao', y='PM10', data=dados_ar)
plt.title('Distribuição de PM10 por Estação')
plt.xlabel('Estação')
plt.ylabel('Concentração (µg/m³)')
plt.xticks(rotation=45, ha='right')
plt.show()

# 3. Visualização de Dados Geográficos (Exemplo Simplificado)
# Mapa centralizado em Curitiba
mapa_curitiba = folium.Map(location=[-25.4296, -49.2719], zoom_start=12)

# Adicionar marcadores para as estações
for index, row in estacoes.iterrows():
    folium.Marker(location=[row['latitude'], row['longitude']], popup=row['nome_estacao']).add_to(mapa_curitiba)

mapa_curitiba.save('mapa_estacoes_ar.html') # Salva o mapa como um arquivo HTML

# 4. Análise de Séries Temporais (Exemplo com PM2.5)
# Preparar dados para o Prophet
df_prophet = dados_ar[['data_hora', 'PM2.5']].rename(columns={'data_hora': 'ds', 'PM2.5': 'y'})
model_prophet = Prophet()
model_prophet.fit(df_prophet)
future = model_prophet.make_future_dataframe(periods=30, freq='H') # Previsão para as próximas 30 horas
forecast_prophet = model_prophet.predict(future)

# Plot da previsão
fig1 = model_prophet.plot(forecast_prophet)
plt.title('Previsão de PM2.5 com Prophet')
plt.show()

# 5. Modelagem Preditiva (Exemplo com Regressão Linear)
features = ['temperatura', 'umidade', 'vento'] # Exemplo
target = 'PM2.5'

dados_modelo = dados_ar.dropna(subset=features + [target])

X_train, X_test, y_train, y_test = train_test_split(dados_modelo[features], dados_modelo[target], test_size=0.2, random_state=42)

modelo = LinearRegression()
modelo.fit(X_train, y_train)

y_pred = modelo.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f'Erro Quadrático Médio (MSE): {mse}')

# 6. Visualização de Dados (Exemplo com Scatter Plot)
plt.figure(figsize=(10, 6))
plt.scatter(dados_ar['temperatura'], dados_ar['PM2.5'])
plt.title('Relação entre Temperatura e PM2.5')
plt.xlabel('Temperatura (°C)')
plt.ylabel('Concentração de PM2.5 (µg/m³)')
plt.grid(True)
plt.show()

